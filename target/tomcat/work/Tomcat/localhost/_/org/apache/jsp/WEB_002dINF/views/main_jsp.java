/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-03-29 09:31:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("    <style rel=\"stylesheet\">\r\n");
      out.write("        .message-div{\r\n");
      out.write("            width: 500px;\r\n");
      out.write("            min-height: 500px;\r\n");
      out.write("            margin: auto 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            background: coral;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <title>聊天</title>\r\n");
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        //判断当前浏览器是否支持WebSocket\r\n");
      out.write("        var webSocket = null;\r\n");
      out.write("        if ('WebSocket' in window) {\r\n");
      out.write("            webSocket = new WebSocket(\"ws://localhost:8080/socket/127.0.0.1\");\r\n");
      out.write("        } else if ('MozWebSocket' in window) {\r\n");
      out.write("            webSocket = new MozWebSocket(\"ws://localhost:8080/socket/127.0.0.1\");\r\n");
      out.write("        } else {\r\n");
      out.write("            alert('Not support webSocket');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //打开socket,握手\r\n");
      out.write("        webSocket.onopen = function (event) {\r\n");
      out.write("            alert(\"websocket已经连接\");\r\n");
      out.write("        }\r\n");
      out.write("        //接收推送的消息\r\n");
      out.write("        webSocket.onmessage = function (event) {\r\n");
      out.write("            console.info(event);\r\n");
      out.write("            $(\"<div></div>\").append(event.data).appendTo($(\".message-div\"));\r\n");
      out.write("        }\r\n");
      out.write("        //错误时\r\n");
      out.write("        webSocket.onerror = function (event) {\r\n");
      out.write("            console.info(\"发生错误\");\r\n");
      out.write("            alert(\"websocket发生错误\" + event);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //关闭连接\r\n");
      out.write("        webSocket.onclose = function () {\r\n");
      out.write("            console.info(\"关闭连接\");\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //监听窗口关闭\r\n");
      out.write("        window.onbeforeunload = function (event) {\r\n");
      out.write("            webSocket.close();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //单发\r\n");
      out.write("        function sendMessageToUser() {\r\n");
      out.write("            if (webSocket.readyState == webSocket.OPEN) {\r\n");
      out.write("                var msg = document.getElementById(\"inputMsg\").value;\r\n");
      out.write("                var json = {\"username\": \"admin\"};\r\n");
      out.write("                webSocket.send(json); //发送json数据\r\n");
      out.write("                alert(\"发送成功!\");\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"连接失败!\");\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        //群发\r\n");
      out.write("        function sendMessageToAll() {\r\n");
      out.write("            if (webSocket.readyState == webSocket.OPEN) {\r\n");
      out.write("                var msg = document.getElementById(\"inputMsg\").value;\r\n");
      out.write("                webSocket.send(msg);\r\n");
      out.write("                alert(\"发送成功!\");\r\n");
      out.write("            } else {\r\n");
      out.write("                alert(\"连接失败!\");\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"message-div\">\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
